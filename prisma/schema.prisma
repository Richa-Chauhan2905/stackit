// This is your Prisma schema file,
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique
  password  String
  image     String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  questions      Question[]
  answers        Answer[]
  votes          Vote[]
  comments       Comment[]
  sentNotifs     Notification[] @relation("SentNotifications")
  receivedNotifs Notification[] @relation("ReceivedNotifications")
  mentions       Mention[]      @relation("MentionedUser")
  adminActions   AdminPanel[]
}

enum Role {
  USER
  ADMIN
}

model Question {
  id          String   @id @default(uuid())
  coverImage  String?
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user     User          @relation(fields: [userId], references: [id])
  userId   String
  answers  Answer[]
  tags     QuestionTag[]
  adminOps AdminPanel[]  @relation("QuestionTarget")
}

model Answer {
  id          String   @id @default(uuid())
  description String
  isAccepted  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  question   Question     @relation(fields: [questionId], references: [id])
  questionId String
  user       User         @relation(fields: [userId], references: [id])
  userId     String
  votes      Vote[]
  comments   Comment[]
  adminOps   AdminPanel[] @relation("AnswerTarget")
}

model Tag {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())

  // Relations
  questions QuestionTag[]
}

model QuestionTag {
  id String @id @default(uuid())

  // Relations
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
  tag        Tag      @relation(fields: [tagId], references: [id])
  tagId      String
}

model Vote {
  id        String   @id @default(uuid())
  type      VoteType
  createdAt DateTime @default(now())

  // Relations
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  answer   Answer @relation(fields: [answerId], references: [id])
  answerId String
}

enum VoteType {
  UP
  DOWN
}

model Notification {
  id        String    @id @default(uuid())
  type      NotifType
  message   String
  isRead    Boolean   @default(false)
  createdAt DateTime  @default(now())

  // Relations
  sender     User   @relation("SentNotifications", fields: [senderId], references: [id])
  senderId   String
  receiver   User   @relation("ReceivedNotifications", fields: [receiverId], references: [id])
  receiverId String
}

enum NotifType {
  ANSWERED
  COMMENTED
  MENTIONED
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  answer   Answer       @relation(fields: [answerId], references: [id])
  answerId String
  user     User         @relation(fields: [userId], references: [id])
  userId   String
  mentions Mention[]
  adminOps AdminPanel[] @relation("CommentTarget")
}

model Mention {
  id String @id @default(uuid())

  // Relations
  mentionedUser   User    @relation("MentionedUser", fields: [mentionedUserId], references: [id])
  mentionedUserId String
  comment         Comment @relation(fields: [commentId], references: [id])
  commentId       String
}

model AdminPanel {
  id        String      @id @default(uuid())
  action    AdminAction
  reason    String?
  timestamp DateTime    @default(now())

  // Relations
  admin   User   @relation(fields: [adminId], references: [id])
  adminId String

  // Polymorphic target relations
  questionId String?
  question   Question? @relation("QuestionTarget", fields: [questionId], references: [id])

  answerId String?
  answer   Answer? @relation("AnswerTarget", fields: [answerId], references: [id])

  commentId String?
  comment   Comment? @relation("CommentTarget", fields: [commentId], references: [id])
}

enum AdminAction {
  DELETE_QUESTION
  DELETE_ANSWER
  EDIT_QUESTION
  EDIT_ANSWER
  DELETE_COMMENT
  EDIT_COMMENT
}
